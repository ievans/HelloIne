// Generated by llvm2cpp - DO NOT MODIFY!

#include <llvm/Pass.h>
#include <llvm/ADT/SmallVector.h>
#include <llvm/Analysis/Verifier.h>
#include <llvm/IR/BasicBlock.h>
#include <llvm/IR/CallingConv.h>
#include <llvm/IR/Constants.h>
#include <llvm/IR/DerivedTypes.h>
#include <llvm/IR/Function.h>
#include <llvm/IR/GlobalVariable.h>
#include <llvm/IR/IRPrintingPasses.h>
#include <llvm/IR/InlineAsm.h>
#include <llvm/IR/Instructions.h>
#include <llvm/IR/LLVMContext.h>
#include <llvm/IR/LegacyPassManager.h>
#include <llvm/IR/Module.h>
#include <llvm/Support/FormattedStream.h>
#include <llvm/Support/MathExtras.h>
#include <algorithm>
using namespace llvm;

Module* makeLLVMModule();

int main(int argc, char**argv) {
  Module* Mod = makeLLVMModule();
  verifyModule(*Mod, PrintMessageAction);
  PassManager PM;
  PM.add(createPrintModulePass(&outs()));
  PM.run(*Mod);
  return 0;
}


Module* makeLLVMModule() {
 // Module Construction
 Module* mod = new Module("inline.bc", getGlobalContext());
 mod->setDataLayout("");
 mod->setTargetTriple("x86_64-unknown-linux-gnu");
 
 // Type Definitions
 ArrayType* ArrayTy_0 = ArrayType::get(IntegerType::get(mod->getContext(), 8), 12);
 
 PointerType* PointerTy_1 = PointerType::get(ArrayTy_0, 0);
 
 std::vector<Type*>FuncTy_2_args;
 FunctionType* FuncTy_2 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 32),
  /*Params=*/FuncTy_2_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_4 = PointerType::get(IntegerType::get(mod->getContext(), 8), 0);
 
 PointerType* PointerTy_3 = PointerType::get(PointerTy_4, 0);
 
 PointerType* PointerTy_5 = PointerType::get(IntegerType::get(mod->getContext(), 32), 0);
 
 std::vector<Type*>FuncTy_7_args;
 FuncTy_7_args.push_back(OtherTy_8);
 FuncTy_7_args.push_back(OtherTy_8);
 FuncTy_7_args.push_back(OtherTy_8);
 FunctionType* FuncTy_7 = FunctionType::get(
  /*Result=*/Type::getVoidTy(mod->getContext()),
  /*Params=*/FuncTy_7_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_6 = PointerType::get(FuncTy_7, 0);
 
 std::vector<Type*>FuncTy_10_args;
 FuncTy_10_args.push_back(IntegerType::get(mod->getContext(), 32));
 FunctionType* FuncTy_10 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 32),
  /*Params=*/FuncTy_10_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_9 = PointerType::get(FuncTy_10, 0);
 
 
 // Function Declarations
 
 Function* func_main = mod->getFunction("main");
 if (!func_main) {
 func_main = Function::Create(
  /*Type=*/FuncTy_2,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"main", mod); 
 func_main->setCallingConv(CallingConv::C);
 }
 AttributeSet func_main_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    B.addAttribute(Attribute::UWTable);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_main_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_main->setAttributes(func_main_PAL);
 
 Function* func_llvm_dbg_declare = mod->getFunction("llvm.dbg.declare");
 if (!func_llvm_dbg_declare) {
 func_llvm_dbg_declare = Function::Create(
  /*Type=*/FuncTy_7,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"llvm.dbg.declare", mod); // (external, no body)
 func_llvm_dbg_declare->setCallingConv(CallingConv::C);
 }
 AttributeSet func_llvm_dbg_declare_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::NoUnwind);
    B.addAttribute(Attribute::ReadNone);
    PAS = AttributeSet::get(mod->getContext(), ~0U, B);
   }
  
  Attrs.push_back(PAS);
  func_llvm_dbg_declare_PAL = AttributeSet::get(mod->getContext(), Attrs);
  
 }
 func_llvm_dbg_declare->setAttributes(func_llvm_dbg_declare_PAL);
 
 // Global Variable Declarations

 
 GlobalVariable* gvar_array__str = new GlobalVariable(/*Module=*/*mod, 
 /*Type=*/ArrayTy_0,
 /*isConstant=*/true,
 /*Linkage=*/GlobalValue::PrivateLinkage,
 /*Initializer=*/0, // has initializer, specified below
 /*Name=*/".str");
 gvar_array__str->setAlignment(1);
 
 // Constant Definitions
 Constant *const_array_11 = ConstantDataArray::getString(mod->getContext(), "hello there", true);
 ConstantInt* const_int32_12 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("1"), 10));
 std::vector<Constant*> const_ptr_13_indices;
 ConstantInt* const_int32_14 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("0"), 10));
 const_ptr_13_indices.push_back(const_int32_14);
 const_ptr_13_indices.push_back(const_int32_14);
 Constant* const_ptr_13 = ConstantExpr::getGetElementPtr(gvar_array__str, const_ptr_13_indices);
 ConstantInt* const_int32_15 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("20"), 10));
 ConstantInt* const_int32_16 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("10"), 10));
 
 // Global Variable Definitions
 gvar_array__str->setInitializer(const_array_11);
 
 // Function Definitions
 
 // Function: main (func_main)
 {
  
  BasicBlock* label_entry = BasicBlock::Create(mod->getContext(), "entry",func_main,0);
  
  // Block entry (label_entry)
  AllocaInst* ptr_str = new AllocaInst(PointerTy_4, "str", label_entry);
  ptr_str->setAlignment(8);
  AllocaInst* ptr_len = new AllocaInst(IntegerType::get(mod->getContext(), 32), "len", label_entry);
  ptr_len->setAlignment(4);
  AllocaInst* ptr_a = new AllocaInst(IntegerType::get(mod->getContext(), 32), "a", label_entry);
  ptr_a->setAlignment(4);
  AllocaInst* ptr_b = new AllocaInst(IntegerType::get(mod->getContext(), 32), "b", label_entry);
  ptr_b->setAlignment(4);
  std::vector<Value*> void_17_params;
  void_17_params.push_back(other_18);
  void_17_params.push_back(other_19);
  void_17_params.push_back(other_20);
  CallInst* void_17 = CallInst::Create(func_llvm_dbg_declare, void_17_params, "", label_entry);
  void_17->setCallingConv(CallingConv::C);
  void_17->setTailCall(false);
  AttributeSet void_17_PAL;
  void_17->setAttributes(void_17_PAL);
  
  StoreInst* void_21 = new StoreInst(const_ptr_13, ptr_str, false, label_entry);
  void_21->setAlignment(8);
  std::vector<Value*> void_22_params;
  void_22_params.push_back(other_23);
  void_22_params.push_back(other_24);
  void_22_params.push_back(other_20);
  CallInst* void_22 = CallInst::Create(func_llvm_dbg_declare, void_22_params, "", label_entry);
  void_22->setCallingConv(CallingConv::C);
  void_22->setTailCall(false);
  AttributeSet void_22_PAL;
  void_22->setAttributes(void_22_PAL);
  
  StoreInst* void_25 = new StoreInst(const_int32_15, ptr_len, false, label_entry);
  void_25->setAlignment(4);
  std::vector<Value*> void_26_params;
  void_26_params.push_back(other_27);
  void_26_params.push_back(other_28);
  void_26_params.push_back(other_20);
  CallInst* void_26 = CallInst::Create(func_llvm_dbg_declare, void_26_params, "", label_entry);
  void_26->setCallingConv(CallingConv::C);
  void_26->setTailCall(false);
  AttributeSet void_26_PAL;
  void_26->setAttributes(void_26_PAL);
  
  StoreInst* void_29 = new StoreInst(const_int32_16, ptr_a, false, label_entry);
  void_29->setAlignment(4);
  std::vector<Value*> void_30_params;
  void_30_params.push_back(other_31);
  void_30_params.push_back(other_32);
  void_30_params.push_back(other_20);
  CallInst* void_30 = CallInst::Create(func_llvm_dbg_declare, void_30_params, "", label_entry);
  void_30->setCallingConv(CallingConv::C);
  void_30->setTailCall(false);
  AttributeSet void_30_PAL;
  void_30->setAttributes(void_30_PAL);
  
  LoadInst* int32_33 = new LoadInst(ptr_a, "", false, label_entry);
  int32_33->setAlignment(4);
  InlineAsm* ptr_35 = InlineAsm::get(FuncTy_10, "movl $1, %eax; movl %eax, $0;", "=r,r,~{eax},~{dirflag},~{fpsr},~{flags}",true);
  CallInst* int32_34 = CallInst::Create(ptr_35, int32_33, "", label_entry);
  int32_34->setCallingConv(CallingConv::C);
  int32_34->setTailCall(false);
  AttributeSet int32_34_PAL;
  {
   SmallVector<AttributeSet, 4> Attrs;
   AttributeSet PAS;
    {
     AttrBuilder B;
     B.addAttribute(Attribute::NoUnwind);
     PAS = AttributeSet::get(mod->getContext(), ~0U, B);
    }
   
   Attrs.push_back(PAS);
   int32_34_PAL = AttributeSet::get(mod->getContext(), Attrs);
   
  }
  int32_34->setAttributes(int32_34_PAL);
  
  StoreInst* void_36 = new StoreInst(int32_34, ptr_b, false, label_entry);
  void_36->setAlignment(4);
  ReturnInst::Create(mod->getContext(), const_int32_14, label_entry);
  
 }
 
 return mod;
}
